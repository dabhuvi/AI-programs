import heapq

class Node:
    def __init__(self, state, parent=None, cost=0, heuristic=0):
        self.state = state
        self.parent = parent
        self.cost = cost
        self.heuristic = heuristic

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

def heuristic(state, goal_state):
    
    return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

def astar_search(graph, start_state, goal_state):
    start_node = Node(start_state, None, 0, heuristic(start_state, goal_state))
    priority_queue = [start_node]

    while priority_queue:
        current_node = heapq.heappop(priority_queue)

        if current_node.state == goal_state:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        for neighbor, cost in graph[current_node.state]:
            new_cost = current_node.cost + cost
            new_heuristic = heuristic(neighbor, goal_state)
            new_node = Node(neighbor, current_node, new_cost, new_heuristic)

            
            if all(node.state != new_node.state or node.cost + node.heuristic > new_node.cost + new_node.heuristic
                   for node in priority_queue):
                heapq.heappush(priority_queue, new_node)

    return None

def main():
    graph = {
        (0, 0): [((0, 1), 1), ((1, 0), 1)],
        (0, 1): [((0, 0), 1), ((1, 1), 1)],
        (1, 0): [((0, 0), 1), ((1, 1), 1)],
        (1, 1): [((0, 1), 1), ((1, 0), 1), ((2, 2), 3)],
        (2, 2): [((1, 1), 3)]
    }

    start_state = (0, 0)
    goal_state = (2, 2)

    path = astar_search(graph, start_state, goal_state)

    if path:
        print(f"Shortest Path from {start_state} to {goal_state}:")
        print(path)
    else:
        print("No path found.")

if __name__ == "__main__":
    main()
